from flask import Flask, render_template, request, redirect
from googletrans import Translator, constants
import re, requests, lxml
import bs4
import sqlite3 as sql
import json

app = Flask(__name__)

@app.route("/")
@app.route("/immer")
def immer():
    con = sql.connect('immer.db')
    con.row_factory = sql.Row  
    cur = con.cursor()
    langs = con.execute('SELECT * FROM langs ORDER BY language ASC')

    return render_template("immer.html", langs = langs)

@app.route("/recent")
def recent():

    con = sql.connect('immer.db')
    con.row_factory = sql.Row  
    cur = con.cursor()
    recents = con.execute('SELECT DISTINCT string, * FROM qlog ORDER BY id DESC LIMIT 100;')
    langs = con.execute('SELECT * FROM langs ORDER BY language ASC')      
    return render_template("recent.html", recents = recents, langs = langs)

@app.route("/result", methods=["POST"])
def result():
    #translator is feeling empy inside and waiting for someone to talk to it.
    translator = Translator()
    #get user input
    usrinp = request.form.get("input")
    #selected language
    lang_sel = request.form.get("lang")
    #ip logging
    ipinfo = request.form.get("ipinfo")

    # create url to qry geolocation by ip address...
    response = requests.get('https://geolocation-db.com/jsonp/' + ipinfo)
    result = response.content.decode()
    result = result.split("(")[1].strip(")")
    result  = json.loads(result)
    country = result['country_name']
    country_code = result['country_code']
    city = result['city']

    #translate and combine query with url
    destlang = translator.translate(usrinp, dest=lang_sel)

    #combine url with user input and create a query for google
    url = ('https://www.google.com/search?hl=' + lang_sel + '&q=' + destlang.text + '&num=20' + '&safe=active')

    con = sql.connect('immer.db')
    con.row_factory = sql.Row  
    cur = con.cursor()
    langs = con.execute('SELECT * FROM langs ORDER BY language ASC')
    con.execute('INSERT INTO qlog (url, string, trans, country, country_code, city, target_lang) VALUES (?, ?, ?, ?, ?, ?, ?)', (url, usrinp, destlang.text, country, country_code, city, lang_sel))
    con.commit()

    #user agent to assure google that it's not the end of the world
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}

    #combine variables generated by user input
    search = requests.get(url, headers)
    #hide images that won't display properly on page
    search = re.sub('''img''', '''img hidden''', search.text)
    search = re.sub('''alt''', '''placeholder''', search)

    # hide google menu links
    search = re.sub('google.com', '''" hidden></a><a hidden href="''', search)

    #fix links so they work through google
    search = re.sub('''/url?''', '''http://google.com/url''', search)
    #open in new tab
    search = re.sub('''<a ''', '''<a target="_blank"''', search)

    # make attributes invalid
    ignorethese = [' id', ' class', ' style', ' src']
    for i in ignorethese:    
        search = re.sub(i, ''' ignore''', search)

    links = []
    soup = bs4.BeautifulSoup(search, "html.parser")

    for link in soup.find_all(href=re.compile("/url?")):
        links.append(link)

    return render_template("result.html", translation = destlang.text, links = links, ipinfo = ipinfo, langs = langs)